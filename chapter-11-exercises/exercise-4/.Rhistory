num_smaller <- phone_numbers <= 5
small <- phone_numbers[num_smaller]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
num_larger <- phone_numbers > 5
large <- phone_numbers[num_large]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[large] = 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
odd <- phone_numbers %% 2 == 1
phone_numbers[odd] = 0
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
num_smaller <- phone_numbers <= 5
small <- phone_numbers[num_smaller]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
num_larger <- phone_numbers > 5
large <- phone_numbers[num_larger]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[large] = 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
odd <- phone_numbers %% 2 == 1
phone_numbers[odd] = 0
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
num_smaller <- phone_numbers <= 5
small <- phone_numbers[num_smaller]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
num_larger <- phone_numbers > 5
large <- phone_numbers[num_larger]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[large] = 5
print(phone_numbers)
# Replace every odd-numbered value in `phone_numbers` with the number 0
odd <- phone_numbers %% 2 == 1
phone_numbers[odd] = 0
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
num_smaller <- phone_numbers <= 5
small <- phone_numbers[num_smaller]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
num_larger <- phone_numbers > 5
large <- phone_numbers[num_larger]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[num_larger] = 5
print(phone_numbers)
# Replace every odd-numbered value in `phone_numbers` with the number 0
odd <- phone_numbers %% 2 == 1
phone_numbers[odd] = 0
phone_numbers[odd] = 0
source('~/Documents/INFO-201/book-exercises/chapter-07-exercises/exercise-2/exercise.R')
source('~/Documents/INFO-201/book-exercises/chapter-07-exercises/exercise-2/exercise.R')
my_breakfast <- c("cake", "bread")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("udon")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[dinner] = c("rice", "egg")
my_breakfast <- c("cake", "bread")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("udon")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[dinner] = c("rice", "egg")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
meals$dinner = c("rice", "egg")
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("cake", "bread")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("udon")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner = c("rice", "egg")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("cake", "bread")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("udon")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner = c("rice", "egg", "vegetables")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
meals[[5]] <- meals[[lunch]]
meals[[5]] <- meals[[my_lunch]]
my_breakfast <- c("cake", "bread")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("udon")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner = c("rice", "egg", "vegetables")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[[my_lunch]]
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("cake", "bread")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("udon")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner = c("rice", "egg", "vegetables")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- c(meals["breakfast"], meals["lunch"])
sharks <- c("Hammerhead", "Great White", "Thresher")
# Scientists discovered a new deep-sea shark called a Goblin shark you want to add this to your vector of sharks
# Use the `c()` function to combine the `sharks` vector and the newly discovered "Goblin" shark
updated_sharks <- c(Sharks, Goblin)
print(updated_sharks)
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
# Vector of booleans (to filter the 'endangered' vector) where TRUE means that the endangered species is a mammal
filter <- c(TRUE FALSE FALSE TRUE FALSE, TRUE)
# Extract element in an index that is TRUE
print(endangered(filter))
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
# Vector of booleans (to filter the 'endangered' vector) where TRUE means that the endangered species is a mammal
filter <- c(TRUE FALSE FALSE TRUE FALSE, TRUE)
# Extract element in an index that is TRUE
print(endangered[filter])
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
# Vector of booleans (to filter the 'endangered' vector) where TRUE means that the endangered species is a mammal
filter <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE)
# Extract element in an index that is TRUE
print(endangered[filter])
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
# filter for earthquakes that were larger than 6.5
earthquakes[ earthquakes > 6.5]
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
# filter for earthquakes that were larger than 6.5
earthquakes[ > 6.5] <- original wrong one (Syntax)
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
# filter for earthquakes that were larger than 6.5
earthquakes[ > 6.5] #<- original wrong one (Syntax)
#earthquakes[earthquakes > 6.5]
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
# Vector of booleans (to filter the 'endangered' vector) where TRUE means that the endangered species is a mammal
filter <- c(TRUE FALSE FALSE TRUE FALSE, TRUE) #<-- original wrong one (Syntax)
# Extract element in an index that is TRUE
print(endangered(filter))# <-- original wrong one (Logical)
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
# Vector of booleans (to filter the 'endangered' vector) where TRUE means that the endangered species is a mammal
filter <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE) #<-- original wrong one (Syntax)
# Extract element in an index that is TRUE
print(endangered(filter))# <-- original wrong one (Logical)
#print(endangered[filter])
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
# Vector of booleans (to filter the 'endangered' vector) where TRUE means that the endangered species is a mammal
#filter <- c(TRUE FALSE FALSE TRUE FALSE, TRUE) <-- original wrong one (Syntax)
filter <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE)
# Extract element in an index that is TRUE
#print(endangered(filter)) <-- original wrong one (Logical)
print(endangered[filter])
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6) #
# Access the last element in the list and return a vector
shark_length[-4]
# Confirm that you returned a vector and not a list
is.list(shark_length)
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
shark_length[-4]
# Confirm that you returned a vector and not a list
is.list(shark_length)
shark_length[4]
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
# Access the last element in the list and return a vector
#shark_length[-4] # original wrong one (Semantic)
shark_length[4]
# Confirm that you returned a vector and not a list
is.list(shark_length)
#shark_length[-4] # original wrong one (Semantic)
shark_length[4]
# Confirm that you returned a vector and not a list
is.vector(shark_length)
shark_length[4]
# Confirm that you returned a vector and not a list
is.list(shark_length[4])
# Access the last element in the list and return a vector
#shark_length[-4] # original wrong one (Semantic)
shark_length[4]
# Confirm that you returned a vector and not a list
is.vector(shark_length[4])
shark_length[[4]]
is.list(shark_length[[4]])
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
# Add a new item is_participant = "Yes" to the list lab_grades
lab_grades[[is_participant]] <- "Yes"
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
# Add a new item is_participant = "Yes" to the list lab_grades
lab_grades[is_participant] <- "Yes"
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
# Add a new item is_participant = "Yes" to the list lab_grades
lab_grades$is_participant <- "Yes"
lab_grades[[is_participant]] <- "Yes" # original wrong one (Logical)
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
#total_with_discount <- (tea + 2*scone) + discount # original wrong one (Semantic)
total_with_discount <- (tea + 2*scone) * (1 - discount)
# Now calculate your total after the 10% discount by multiplying your total by discount
#total_after_tax <- total_with_discount + sales_tax # original wrong one (Semantic)
total_after_tax <- total_with_discount * (1 - sales_tax)
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
#total_with_discount <- (tea + 2*scone) + discount # original wrong one (Semantic)
total_with_discount <- (tea + 2*scone) * (1 - discount)
# Now calculate your total after the 10% discount by multiplying your total by discount
#total_after_tax <- total_with_discount + sales_tax # original wrong one (Semantic)
total_after_tax <- total_with_discount * (1 + sales_tax)
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
#total_with_discount <- (tea + 2*scone) + discount # original wrong one (Semantic)
total_with_discount <- (tea + 2*scone) * (1 - discount)
# Now calculate your total after the 10% discount by multiplying your total by discount
#total_after_tax <- total_with_discount + sales_tax # original wrong one (Semantic)
total_after_tax <- round(total_with_discount * (1 + sales_tax), 2)
# Here is a list of lab grades for imaginary lab section LL
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
# Add a new item is_participant = "Yes" to the list lab_grades
lab_grades[[is_participant]] <- "Yes" # original wrong one (Logical)
#lab_grades$is_participant <- "Yes"
install.packages(c("devtools", "fueleconomy"))
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
nstall.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
setwd("~/Documents/INFO-201/book-exercises/chapter-11-exercises/exercise-1")
nstall.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
nstall.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
car_make <- select(make, vehicles)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(car_make)
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makes)
length(unique(makes))
vehicles[vehicles$year == 1997, ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$city) / 2
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$city) / 2
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$city)/2
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles_1997, method = vehicles_1997$hwy)
?order
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles_1997$hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$city)/2
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$cty) /2
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
view(vehicles_1997)
View(vehicles_1997)
savers <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty > 20]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
savers <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty > 20,]
vehicles[min(vehicles$hwy), "id"]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
savers[savers$hwy == min(savers$hwy), "id"]
View(savers)
source('~/Documents/INFO-201/book-exercises/chapter-11-exercises/exercise-1/exercise.R')
install.packages("devtools")
source('~/Documents/INFO-201/book-exercises/chapter-11-exercises/exercise-1/exercise.R')
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("dplyer")
setwd("~/Documents/INFO-201/book-exercises/chapter-11-exercises/exercise-4")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
load("dplyer")
.packages("dplyr") # once per machine
library("dplyr")
install.packages("dplyr") # once per machine
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("dplyr") # once per machine
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("dplyr") # once per machine
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
nrow(flights)
ncolumn(flights)
colnames(flights)
ncol(flights)
?mutate
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, delayed_in_air = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- sort(delayed_in_air)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- sort(flights, delayed_in_air)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -delayed_in_air)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
reset(flights)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, delayed_in_air = arr_delay - dep_delay) %>%
arrange(-delayed_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights, delayed_in_air)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay) %>%
arrange(-gain_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights, gain_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
hist(gain_in_air)
?hist
# Make a histogram of the amount of time gained using the `hist()` function
hist(gain_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gain_in_air)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay) %>%
arrange(-gain_in_air) %>%
hist()
to_sea <- filter(flights, dest == "SEA") %>%
select(to_sea, origin, dest, gain_in_air)
to_sea <- filter(flights, dest == "SEA") %>%
select(origin, dest, gain_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# gain
summarize(flights, avg_delayed, mean(delayed_in_air), na.rm=TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# gain
summarize(flights, mean(delayed_in_air), na.rm=TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# gain
summarize(flights, mean(gain_in_air), na.rm=TRUE)
?summarize
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# gain
summarize(flights, avg_delayed = mean(gain_in_air), na.rm=TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# gain
avg_delayed <- summarize(flights, mean(gain_in_air), na.rm=TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# gain
summarize(flights, avg_delay = mean(gain_in_air), na.rm=TRUE)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, avg_delayed = mean(gain_in_air), na.rm = TRUE)
flights %>%
filter(dest == "SEA") %>%
select(origin, dest, gain_in_air) %>%
summarize(avg_delayed = mean(gain_in_air), na.rm = TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# gain
summarize(flights, avg_delay = mean(gain_in_air), na.rm=TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
# gain
summarize(flights, avg_delay = mean(air_time), na.rm=TRUE)
flights %>%
filter(dest == "SEA") %>%
# select(origin, dest, gain_in_air) %>%
summarize(avg_delayed = mean(gain_in_air), na.rm = TRUE) %>%
pull(avg_delayed)
source('~/Documents/INFO-201/book-exercises/chapter-11-exercises/exercise-4/exercise.R')
